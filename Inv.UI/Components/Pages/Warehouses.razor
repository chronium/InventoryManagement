@page "/"
@using Inv.Application.Shared.QueryDtos
@using Inv.UI.Components.Dialogs
@using Inv.UI.Services

@inject NavigationManager NavigationManager
@inject IDialogService DialogService

@inject WarehouseApiClient WarehouseApi

@rendermode InteractiveServer

<h3>Warehouses</h3>

<FluentButton Appearance="Appearance.Accent" OnClick="@(OpenAddWarehouse)">
    Add Warehouse
</FluentButton>

<FluentDataGrid ItemsProvider="@warehouseProvider" @ref="dataGridRef">
    <PropertyColumn Property="@(w => w.Name)"/>
    <TemplateColumn>
        <FluentButton Appearance="Appearance.Accent" OnClick="@(() => ViewWarehouse(context))">
            View
        </FluentButton>
    </TemplateColumn>
</FluentDataGrid>

@code {
    GridItemsProvider<WarehouseDto> warehouseProvider = default!;
    FluentDataGrid<WarehouseDto> dataGridRef = default!;

    protected override Task OnInitializedAsync()
    {
        warehouseProvider = async req =>
        {
            var warehouses = await WarehouseApi.GetAllWarehousesAsync(req.CancellationToken);

            return GridItemsProviderResult.From(
                warehouses, warehouses.Count);
        };

        return Task.CompletedTask;
    }

    private void ViewWarehouse(WarehouseDto warehouse)
    {
        NavigationManager.NavigateTo($"/warehouses/{warehouse.Id}");
    }

    private Task OpenAddWarehouse()
    {
        return DialogService.ShowDialogAsync<CreateWarehouse>(new()
        {
            Title = "Add Warehouse",
            PreventDismissOnOverlayClick = true,
            OnDialogResult = DialogService.CreateDialogCallback(this, async result =>
            {
                if (result.Cancelled)
                    return;
                await dataGridRef!.RefreshDataAsync();
            }),
        });
    }

}